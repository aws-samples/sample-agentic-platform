Parameters:
  RepoUrl:
    Type: String
    Description: The URL of the repo that the CodeBuild project will clone.
    Default: "https://github.com/aws-samples/sample-agentic-platform"

  RepoBranchName:
    Type: String
    Default: main
    Description: (Optional) The name of the branch that the CodeBuild project will clone.

  TerraformPath:
    Type: String
    Default: sample-agentic-platform/infrastructure/stacks/platform-eks
    Description: Path to the Terraform code

  FederatedRoleName:
    Type: String
    Description: The name of the role for whom these resources are being created.

  CICDRoleName:
    Type: String
    Description: The name of the role that will be used for CICD.

  UseKMS:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Whether to use KMS encryption for CodeBuild artifacts

  StackName:
    Type: String
    Default: "agentic-platform"
    Description: Name prefix for all resources

  Environment:
    Type: String
    Default: "dev"
    Description: Environment name

Conditions:
  UseKMSEncryption: !Equals 
    - !Ref UseKMS
    - "true"

Resources:

  ######################################################
  # VPC and Networking Resources
  ######################################################

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-vpc"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-igw"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-public-subnet-1"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"
        - Key: "kubernetes.io/role/elb"
          Value: "1"
        - Key: !Sub "kubernetes.io/cluster/${StackName}-eks"
          Value: "shared"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-public-subnet-2"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"
        - Key: "kubernetes.io/role/elb"
          Value: "1"
        - Key: !Sub "kubernetes.io/cluster/${StackName}-eks"
          Value: "shared"

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.0.11.0/24"
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-private-subnet-1"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"
        - Key: "kubernetes.io/role/internal-elb"
          Value: "1"
        - Key: !Sub "kubernetes.io/cluster/${StackName}-eks"
          Value: "shared"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.0.12.0/24"
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-private-subnet-2"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"
        - Key: "kubernetes.io/role/internal-elb"
          Value: "1"
        - Key: !Sub "kubernetes.io/cluster/${StackName}-eks"
          Value: "shared"

  # Elastic IPs for NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-nat-eip-1"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-nat-eip-2"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  # NAT Gateways
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-nat-gateway-1"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-nat-gateway-2"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-public-route-table"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-private-route-table-1"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-private-route-table-2"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ######################################################
  # VPC Flow Logs
  ######################################################

  # CloudWatch Log Group for VPC Flow Logs
  VPCFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "KMS encryption is conditionally enabled based on UseKMS parameter"
    Properties:
      LogGroupName: !Sub "/aws/vpc/flow-logs/${StackName}-vpc"
      RetentionInDays: 365
      KmsKeyId: !If 
        - UseKMSEncryption
        - !GetAtt ProjectKMSKey.Arn
        - !Ref AWS::NoValue

  # IAM Role for VPC Flow Logs
  VPCFlowLogRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Named role required for consistent reference in VPC Flow Logs configuration"
    Properties:
      RoleName: !Sub "${StackName}-vpc-flow-log-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  # IAM Policy for VPC Flow Logs
  VPCFlowLogPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      RoleName: !Ref VPCFlowLogRole
      PolicyName: !Sub "${StackName}-vpc-flow-log-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource:
              - !GetAtt VPCFlowLogGroup.Arn
              - !Sub "${VPCFlowLogGroup.Arn}:*"

  # VPC Flow Log
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogGroup
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-vpc-flow-log"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Project
          Value: "Agentic Platform Sample"

  ######################################################
  # Terraform State Bucket 
  ######################################################

  TerraformStateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join 
        - '-'
        - - !Ref AWS::StackName
          - 'terraform-state'
          - !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      LoggingConfiguration:
        DestinationBucketName: !Ref TerraformStateLogsBucket
        LogFilePrefix: "access-logs/"

  TerraformStateLogsBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: "This is the logging bucket for the terraform, we don't need a bucket policy here."
          - id: W35
            reason: "This is the access logging bucket itself - adding logging to the logging bucket would create a circular dependency"
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

  TerraformStateBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TerraformStateBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceSSLOnly
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !Sub '${TerraformStateBucket.Arn}/*'
              - !GetAtt TerraformStateBucket.Arn
            Condition:
              Bool:
                'aws:SecureTransport': false

  ######################################################
  # CodeBuild Project
  ######################################################

  InfrastructureCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join 
        - '-'
        - - !Ref AWS::StackName
          - 'terraform-deployment'
          - !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      Description: 'Deploys infrastructure using Terraform'
      ServiceRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${CICDRoleName}'
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: TF_BUCKET_NAME
            Value: !Ref TerraformStateBucket
          - Name: TF_STATE_KEY
            Value: platform-eks/terraform.tfstate
          - Name: REPO_URL
            Value: !Ref RepoUrl
          - Name: REPO_BRANCH_NAME
            Value: !Ref RepoBranchName
          - Name: TF_PATH
            Value: !Ref TerraformPath
          # - Name: ADMIN_ROLE_NAME
          #   Value: !Ref FederatedRoleName
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: STACK_NAME
            Value: !Ref StackName
          - Name: ENVIRONMENT
            Value: !Ref Environment
          - Name: VPC_ID
            Value: !Ref VPC
          - Name: PRIVATE_SUBNET_1_ID
            Value: !Ref PrivateSubnet1
          - Name: PRIVATE_SUBNET_2_ID
            Value: !Ref PrivateSubnet2
          - Name: PUBLIC_SUBNET_1_ID
            Value: !Ref PublicSubnet1
          - Name: PUBLIC_SUBNET_2_ID
            Value: !Ref PublicSubnet2
      EncryptionKey: !If 
        - UseKMSEncryption
        - !GetAtt ProjectKMSKey.Arn
        - !Ref AWS::NoValue
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 18
              commands:
                - echo "Installing dependencies..."
                - apt-get update -y
                - apt-get install -y wget unzip jq
                
                - TERRAFORM_VERSION="1.11.3"
                - echo "Installing Terraform ${TERRAFORM_VERSION}..."
                - wget -q "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
                - unzip "terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
                - mv terraform /usr/local/bin/
                - terraform version
            
            pre_build:
              commands:
                - export TF_IN_AUTOMATION=true
                - echo "Manual CodeBuild execution"
                
                - git clone --single-branch --branch $REPO_BRANCH_NAME $REPO_URL
                
                - cd $TF_PATH
                
                - echo "Creating backend configuration..."
                - |
                  cat > backend.tf << EOF
                  terraform {
                    backend "s3" {
                      bucket         = "${TF_BUCKET_NAME}"
                      key            = "${TF_STATE_KEY}"
                      region         = "${AWS_REGION}"
                      use_lockfile   = true
                      encrypt        = true
                    }
                  }
                  EOF
                
                - echo "Creating terraform.tfvars file..."
                - |
                  cat > terraform.tfvars << EOF
                  # Required variables only - others use defaults
                  aws_region          = "${AWS_REGION}"
                  environment         = "${ENVIRONMENT}"
                  
                  enable_kms_encryption = false
                  kms_key_arn          = null
                  kms_key_id           = null

                  # EKS Config
                  enable_eks_public_access    = true
                  deploy_inside_vpc           = false
                  additional_admin_role_arns = ["arn:aws:iam::${AWS::AccountId}:role/${CICDRoleName}"]
                  # additional_admin_role_arns = ["<ARN for your AgenticPlatformCICDRole>","<YOUR_IAM_PRINCIPAL_ARN"]
                  
                  # Networking Variables (from CloudFormation VPC)
                  vpc_id             = "${VPC_ID}"
                  vpc_cidr_block     = "10.0.0.0/16"
                  private_subnet_ids = ["${PRIVATE_SUBNET_1_ID}", "${PRIVATE_SUBNET_2_ID}"]
                  public_subnet_ids  = ["${PUBLIC_SUBNET_1_ID}", "${PUBLIC_SUBNET_2_ID}"]
                  
                  # Common Tags
                  common_tags = {
                    Environment = "${ENVIRONMENT}"
                    ManagedBy   = "Terraform"
                    Project     = "Agentic Platform Sample"
                  }
                  EOF
                
                - terraform init -input=false
            
            build:
              commands:
                - echo "Creating Terraform plan..."
                - terraform plan -out=tfplan -input=false

                - echo "Applying Terraform plan..."
                - terraform apply -auto-approve tfplan

                - echo "Deployment completed. Outputs:"
                - terraform output -json | jq

          

  ProjectKMSKey:
    Condition: UseKMSEncryption
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for CodeBuild project encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CodeBuild Role to use the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${CICDRoleName}'
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Resource: '*'
          - Sid: Allow Federated Role to manage the key
            Effect: Allow
            Principal:
              AWS: 
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${FederatedRoleName}'
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'

  ProjectKMSKeyAlias:
    Condition: UseKMSEncryption
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-codebuild-key'
      TargetKeyId: !Ref ProjectKMSKey

Outputs:
  # VPC Outputs
  VPCId:
    Description: ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"
  
  VPCCidrBlock:
    Description: CIDR block of the VPC
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub "${AWS::StackName}-VPC-CIDR"
  
  PublicSubnet1Id:
    Description: ID of public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1-ID"
  
  PublicSubnet2Id:
    Description: ID of public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2-ID"
  
  PrivateSubnet1Id:
    Description: ID of private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1-ID"
  
  PrivateSubnet2Id:
    Description: ID of private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2-ID"
  
  PublicSubnetIds:
    Description: IDs of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet-IDs"
  
  PrivateSubnetIds:
    Description: IDs of the private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet-IDs"

  # CodeBuild Outputs
  StateBucketName:
    Description: S3 bucket for Terraform state
    Value: !Ref TerraformStateBucket
  
  CodeBuildProjectName:
    Description: Name of the CodeBuild project for infrastructure deployment
    Value: !Ref InfrastructureCodeBuildProject
  
  ManualBuildCommand:
    Description: Command to manually start a CodeBuild execution
    Value: !Sub "aws codebuild start-build --project-name ${InfrastructureCodeBuildProject}"
